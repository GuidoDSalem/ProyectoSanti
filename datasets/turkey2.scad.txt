//Turkey Window Hanging
// Version00 - 2020-11-14 - comb and wattle too thin for "clean" print
// Version01 - 2020-11-15 - enlarged neck, comb, wattle and beak.

// GPL Statement

// Copyright Algot Runeman, 2020
//    This program is free software: you can redistribute it and/or modify  it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

//    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.


module feather(){difference(){
    linear_extrude(2)
    polygon( points=[[0,0],[7.6,40],[0,45],[-7.6,40]], paths=[[0,1,2,3,0]], convexity=2);
    translate([0,0,-.1])
    linear_extrude(3)
    polygon( points=[[0,37],[6,33],[0,40],[-6,33]], paths=[[0,1,2,3,0]], convexity=2);   
} 
}
module tail(){
for(k=[-120:20:120]){
    rotate([0,0,k])
  
feather();
}}

module curve(){
    difference() {
    cylinder(3,2,2);
    translate([0,1.5,-.10]) // y increased .5 for v01
    cylinder(3.2,2,2);
}
}
module neck(){
    difference() {
    cylinder(3,5,5);
    translate([0,2.5,-.10])
    cylinder(3.2,5,5);
}}

module detail(){
//color("#0000ff"){ //early test
translate([0,15,-.10])
linear_extrude(3)
scale([1,.5,1])
circle(2.5);
    linear_extrude(3)
    polygon( points=[[2,10],[13,12.5],[4,18],[3,23],[3,17],[10,13]], paths=[[0,1,2,3,4,5,0]], convexity=2);   

// comb
translate([0,22,0])
    rotate([0,0,180])
curve();
translate([-3.5,23,0])
    rotate([0,0,190])
curve();
translate([-5,20,0])
    rotate([0,0,230])
curve();
translate([-7,12,0])
    scale([1,3,1])
    rotate([0,0,250])
curve();

// wattle
translate([4,10,0])
    rotate([0,0,10])
curve();
translate([1,7,0])
    rotate([0,0,30])
curve();
translate([0,3,0])
rotate([0,0,90])
curve();
translate([0,3,0])
curve();
// neck
    translate([7,-4,0])
    rotate([0,0,100])
    scale([2,1,1])
    neck();
    translate([-14,-4,0])
    rotate([0,0,245])
    scale([2,1,1])
    neck();
    translate([-5,-15,0])
    rotate([0,0,0])
    scale([2.5,1,1])
    neck();
       
    // } // end early test blue
}
module lt(){
        difference(){
    cylinder(2,6,6);
        translate([-7,0,-.1])
        cube([14,7,2.2]);
    }
}
    
module foot(){
    translate([0,1,0]) // adjust 
    rotate([0,0,-40])
    lt();
    translate([0,2,0])
    linear_extrude(2)
    scale([2,2,1])
    polygon( points=[[-.5,0],[-.5,-5],[-4,-4],[-6,-6],[-4,-5],[-.5,-6],[0,-8],[.5,-6],[4,-5],[6,-6],[4,-4],[.5,-5],[.5,0]], paths=[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,0]], convexity=2);   
}

// EXECUTE
difference(){
tail();
translate([5,0,-.1,])
    detail();
}
// body
difference(){
linear_extrude(2)
circle(25);
translate([-26,1,-.1])
    cube([52,26,3]);
    translate([5,0,-.1])
    detail();
}

// foot
translate([-12,-20,0])
foot();
translate([12,-20,0])
mirror([1,0,0])
foot();
