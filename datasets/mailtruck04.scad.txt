// USPS DeliveryTruck

// Copyright Algot Runeman, 2018
//    This program is free software: you can redistribute it and/or modify  it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

//    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

//    You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.

// version00 2018-02-12 - rear bumper needs support
// version01 2018-02-13 - bumper support and curved roof added wheels and undercarriage
// version02 2018-02-13 - add mirrors
// version03 2018-02-13 - reorganize and code cleanup

// VARIABLES

// comment out view variables as needed for detail viewing
$vpd=330;
$vpr=[73,0.0,337];
$vpt=[25,15,20];

$fn=30;
// on my printer len=70 is minimum for effective detail
// 70 about 1hr 45min
// max length for me 136.5
len=100; 
wid=len*.45;
ht=len*.5;

use<usps5.scad>

// MODULES

module truck(){
// truck box
module tbox() {
hull(){
    // roof 
translate([-len*.2,-wid*.48,ht])
sphere(1);
translate([-len*.2,wid*.5,ht])
sphere(1);
translate([len*.47,-wid*.48,ht])
sphere(1);
translate([len*.47,wid*.5,ht])
sphere(1);
// bottom
translate([-len*.25,-wid*.5,0])
cube([1,1,1]);
translate([-len*.25,wid*.5,0])
cube([1,1,1]);
translate([len*.47,-wid*.5,0])
cube([1,1,1]);
translate([len*.47,wid*.5,0])
cube([1,1,1]);
    }

} // end tbox
module backlights(){
for(k=[0:ht*.12:ht*.4]){
    translate([0,0,k])
    scale([1,.5,1])
    sphere(ht*.05);
}} // end backlights

difference(){
    color("white",1.0)
tbox();
        //mirror holes cut through both sides
        translate([len*.45,-wid*.6,ht*.83])
        cube([ht*.04,wid*2,ht*.04]);
// remove interior of tbox    
translate([len*.05,-wid*.002,-.1])
    scale([.98,.95,.98])
    tbox();
    // right door cutout
    translate([len*.2,-wid*.6,ht*.05]) // adj up 2018-02-14
    cube([wid*.5,wid,ht*.85]);
    // left door cutout
    translate([len*.27,wid*.45,ht*.5])
   // cube([wid*.5,wid,ht*.45]);    
    //     cube([len*.05,wid*.07,ht*.06]);
        cube([len*.17,wid*.5,ht*.45]);
    // rear end door
    translate([-len*.25,-wid*.4,ht*.3])
    rotate([0,5,0])
    cube([wid*.05,wid*.8,ht*.65]);
    // sidewall wheel space
    translate([-len*.05,-wid*.6,ht*.015])
    rotate([-90,0,0])
    cylinder(wid*1.5,wid*.2,wid*.2);
    // rear end lift
    translate([-len*.3,-wid*.6,-ht*.1])
    cube([len*.3,wid*1.4,ht*.2]);
}
// roofcurve
module roofcurve(){
difference(){
cube([len*.65,wid,ht*.1]);
translate([0,wid*.5,0])
rotate([0,90,0])
scale([1,5,1])
cylinder(len*.65,ht*.1,ht*.1);
}}
translate([-len*.2,-wid*.5,ht*.91])  // 0.90 ht makes 2manifold issue
roofcurve();
// crossbrace
translate([len*.15,-wid*.5,-.1])
cube([wid*.1,wid,ht*.1]);
// doorframe
translate([len*.05,-wid*.58,0])
cube([len*.45,wid*.09,ht*.03]);
translate([len*.05,-wid*.58,0])
cube([len*.45,wid*.02,ht*.05]);
translate([len*.03,-wid*.58,ht*.95])
cube([len*.45,wid*.09,ht*.03]);
hull(){
translate([len*.03,-wid*.62,ht*.95])
cube([len*.45,wid*.04,ht*.03]);
    translate([len*.03,-wid*.6,ht*.93])
    rotate([0,90,0])
    cylinder(len*.45,wid*.02,wid*.02);
}

// support for upper frame
translate([len*.02,-wid*.66,0])
cube([len*.45,wid*.05,wid*.08]);
hull(){
translate([len*.03,-wid*.64,2])
sphere(.8);
    translate([len*.03,-wid*.6,ht*.93])
    sphere(.2);
translate([len*.46,-wid*.64,2])
sphere(.8);
    translate([len*.48,-wid*.6,ht*.93])
    sphere(.2);
}

module bumper(){
    color("black",1.0)
hull(){
    translate ([-len*.2,-wid*.5,ht*.1])
    cylinder(5,2,2);
    translate ([-len*.2,wid*.5,ht*.1])
    cylinder(5,2,2);
    translate ([-len*.24,-wid*.5,ht*.1])
    cylinder(5,2,2);
    translate ([-len*.24,wid*.5,ht*.1])
    cylinder(5,2,2);
}
} // end bumper
bumper();

// Supports for bumper
hull(){translate([-len*.25,-wid*.52,0])
cylinder(ht*.11,1.5,.15);
translate([-len*.25,wid*.52,0])
cylinder(ht*.11,1.5,.15);
}
hull(){translate([-len*.18,-wid*.52,0])
cylinder(ht*.11,1.5,.15);
translate([-len*.19,wid*.52,0])
cylinder(ht*.11,1.5,.15);
}

// front bumper
translate([len*1.02,0,-ht*.10])
bumper();
// backlights right
translate([-len*.235,-wid*.45,ht*.4])
rotate([5,0,90])
backlights();
translate([-len*.235,wid*.45,ht*.4])
rotate([5,0,90])
backlights();

// usps logo left side

module logo(){

    translate([0,wid*.55,ht*.75])
    rotate([90,0,0])
    scale([.6,.6,1])
        color("blue",1.0)
    usps5(2.5);
    // usps logo right side
    translate([0,-wid*.49,ht*.75])
    rotate([90,0,0])
    scale([.6,.6,1])
        color("blue",1.0)
    usps5(2.8);
    // usps logo back
    translate([-len*.205,0,ht*.75])
    rotate([86,0,270])
    scale([.6,.6,1])
        color("blue",1.0)
    usps5(2.2);
}
logo();
// front section
difference(){
    color("white",1.0)
hull(){
    // windshield
    translate([len*.45,-wid*.48,ht-2])
    cube([2,wid*.98,2]);
    translate([len*.54,-wid*.45,ht*.5])
    cube([2,wid*.90,2]);
    translate([len*.45,-wid*.5,ht*.5])
    cube([2,wid,2]);
}
translate([len*.56,-wid*.43,ht*.55])
rotate([0,-23,0])
cube([1,wid*.86,ht*.4]);
}
    module  enginebox(){
        difference(){
            color("white",1.0)
hull(){
    // engine case
    translate([len*.44,-wid*.5,ht*.5])
    cube([2,wid*1.02,2]);
    translate([len*.8-2,-wid*.45,ht*.4])
    cube([2,wid*.90,2]);
    translate([len*.8-2,-wid*.5,])
    cube([2,wid*1.02,2]);  
    translate([len*.44,-wid*.5,])
    cube([2,wid*1.02,2]);  
}
// grille
for(k=[0:wid*.1:wid*.7]){
    hull(){
        translate([len*.8,-wid*.3+k,ht*.4])
        sphere(ht*.02);
        translate([len*.8,-wid*.3+k,ht*.1])
        sphere(ht*.02);
        }
}
} 
}
// end enginebox
// front lights
translate([len*.8,-wid*.35,ht*.35])
scale([.5,1,1])
color("yellow",1)
sphere(ht*.1);
translate([len*.8,wid*.35,ht*.35])
scale([.5,1,1])
color("yellow",1)
sphere(ht*.1);


difference(){
enginebox();
    // sidewall wheel space
    translate([len*.6,-wid*.6,ht*.015])
    rotate([-90,0,0])
    cylinder(wid*1.5,wid*.2,wid*.2);
    // wheelspace
    translate([len*.6,-wid*.45,ht*.06])
    rotate([-90,0,0])
    cylinder(wid*.9,wid*.28,wid*.28);
}
} // end truck module
// sliding door
module door(){
    difference(){
    translate([0,-wid*1.4,0])
    cube([ht*.9,wid*.55,wid*.03]);
        translate([len*.2,-wid*1.3,-.1])
        cube([wid*.5,wid*.35,ht*.2]);
    }
    translate([len*.16,-wid*1.38,0])
    cube([len*.05,wid*.07,ht*.06]);
}
module mirrorx(){
hull(){
cylinder(ht*.3,.5,.5);
translate([0,ht*.1,0])
cylinder(ht*.3,.5,.5);
translate([ht*.05,0,0])
cylinder(ht*.3,.5,.5);
}
translate([0,0,-ht*.03])
cube([ht*.03,ht*.2,ht*.03]);
translate([0,0,ht*.3])
cube([ht*.03,ht*.2,ht*.03]);
}


module wheel1(){
    color("black",1.0)
    translate([0,0,ht*.08])
    rotate_extrude(convexity = 10)
translate([len*.08, 0,0])
circle(r = len*.033);
    difference(){
    color("black",1.0)
cylinder(len*.06,wid*.25,wid*.25);
        translate([0,0,-.1])
        cylinder(len*.07,1.7,1.7);
        cylinder(1,1.9,1.4);
    }
    translate([0,0,len*.06])
    color("white",1)
    scale([1,1,.4])
sphere(len*.06);
}

// EXECUTION SECTION

module undercarriage(){
// undercarriage
translate([-len*.2,wid*1.51,0])
cube([len,1.5,wid*.4]);
difference(){
translate([-len*.05,wid*1.45,0])
cylinder(wid*.4,wid*.1,wid*.1);
translate([-len*.05,wid*1.45,-.10])
cylinder(wid*.7,1.9,1.9);   
       // chamfer
    translate([-len*.05,wid*1.45,0])
    cylinder(.1,1.9,1.6);     
}
difference(){
translate([len*.6,wid*1.45,0])
cylinder(wid*.4,wid*.1,wid*.1);
translate([len*.6,wid*1.45,-.10])
cylinder(wid*.7,1.9,1.9);    
    // chamfer
    translate([len*.6,wid*1.45,-.10])
    cylinder(.1,1.9,1.6);    
}
} // end undercarriage
translate([0,-wid*.8,0])
undercarriage();
translate([-len*.2,wid*1.02,0])
wheel1();
translate([len*.04,wid*1.02,0])
wheel1();
translate([len*.28,wid*1.02,0])
wheel1();
translate([len*.52,wid*1.02,0])
wheel1();
truck();

// mirrors
translate([-len*.1,-wid*.65,.5])
rotate([90,0,0])
mirrorx();
mirror([0,1,0])
translate([-len*.2,wid,.5])
rotate([90,0,0])
mirrorx();
translate([0,wid*.15,0])
door();

// MOCKUP COMPONENTS

// Wheel mockup
//
// // right front
//translate([len*.6,-wid*.45,ht*.015])
//rotate([270,0,0])
//    color("black",1.0)
//cylinder(len*.04,wid*.25,wid*.25);
//    translate([len*.6,-wid*.45,ht*.015])
//rotate([270,0,0])
//    color("white",1)
//sphere(len*.04);
//    
//// left front
//translate([len*.6,wid*.48,ht*.015])
//rotate([90,0,0])
//    color("black",1.0)
//cylinder(len*.04,wid*.25,wid*.25);
//    translate([len*.6,wid*.5,ht*.015])
//rotate([270,0,0])
//    color("white",1)
//sphere(len*.04);
//
//// left rear
//translate([-len*.05,wid*.48,ht*.015])
//rotate([90,0,0])
//color("black",1)
//cylinder(len*.04,wid*.25,wid*.25);
//    translate([-len*.05,wid*.48,ht*.015])
//    color("white",1)
//sphere(len*.04);
//
//// right rear
//translate([-len*.05,-wid*.45,ht*.015])
//rotate([90,0,0])
//color("black",1)
//cylinder(len*.04,wid*.25,wid*.25);
//    translate([-len*.05,-wid*.54,ht*.015])
//    color("white",1)
//sphere(len*.04);


//// sliding door in place for mockup
//color("white",1.0)
//    difference(){
//    translate([len*.2,-wid*.54,ht*.015])
//    cube([wid*.55,wid*.03,ht*.97]);
//        translate([len*.22,-wid*.55,ht*.45])
//        cube([wid*.45,wid*.2,ht*.45]);
//    }
